//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/MasterConrols.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MasterConrols : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MasterConrols()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MasterConrols"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""b82d0db1-0c7a-4d4e-b1de-e668648720d1"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""540d63e1-c809-4797-a3f6-3bc7039f5a0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraHorizontalMove"",
                    ""type"": ""Button"",
                    ""id"": ""07352216-fa5f-4795-9d53-3505db171806"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""943f7875-7121-43f5-b548-78530f835b37"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""645e291a-74be-4de0-abb9-77a74717ce25"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraHorizontalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c2d51ff9-1dae-4306-aa12-71be217290ce"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""CameraHorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6f4a121d-d482-4518-8207-fdab1afaf29d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""CameraHorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Action = m_Default.FindAction("Action", throwIfNotFound: true);
        m_Default_CameraHorizontalMove = m_Default.FindAction("CameraHorizontalMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_Action;
    private readonly InputAction m_Default_CameraHorizontalMove;
    public struct DefaultActions
    {
        private @MasterConrols m_Wrapper;
        public DefaultActions(@MasterConrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action => m_Wrapper.m_Default_Action;
        public InputAction @CameraHorizontalMove => m_Wrapper.m_Default_CameraHorizontalMove;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @Action.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAction;
                @CameraHorizontalMove.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnCameraHorizontalMove;
                @CameraHorizontalMove.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnCameraHorizontalMove;
                @CameraHorizontalMove.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnCameraHorizontalMove;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @CameraHorizontalMove.started += instance.OnCameraHorizontalMove;
                @CameraHorizontalMove.performed += instance.OnCameraHorizontalMove;
                @CameraHorizontalMove.canceled += instance.OnCameraHorizontalMove;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IDefaultActions
    {
        void OnAction(InputAction.CallbackContext context);
        void OnCameraHorizontalMove(InputAction.CallbackContext context);
    }
}
